{"version":3,"sources":["core/FormikDebugger/component.jsx","common/Typography/component.jsx","common/Checkbox/styles.js","common/Checkbox/component.jsx","common/Paper/component.jsx","common/TableContainer/component.jsx","common/TableBody/component.jsx","common/TableRow/component.jsx","common/TableHead/component.jsx","common/TableCell/component.jsx","common/Button/component.jsx","common/Container/component.jsx","common/Form/component.jsx","common/FormActions/styles.js","common/FormActions/component.jsx","common/Table/component.jsx","common/TextField/styles.js","common/TextField/component.jsx","core/hooks/useFieldError.js","features/SamplingForm/styles.js","features/SamplingForm/config.js","features/SamplingForm/component.jsx","core/utils/getQueryParam.js","features/SamplingResults/styles.js","features/SamplingResults/component.jsx","pages/Sampling/context.js","pages/Sampling/component.jsx","core/App/component.jsx","core/config/theme.js","serviceWorker.js","index.js"],"names":["FormikDebugger","style","margin","borderRadius","background","boxShadow","textTransform","fontSize","borderTopLeftRadius","borderTopRightRadius","fontWeight","padding","color","letterSpacing","rest","validationSchema","validate","onSubmit","overflowX","JSON","stringify","Typography","children","restProps","useStyles","makeStyles","root","marginTop","marginRight","marginLeft","Checkbox","name","label","labelPlacement","classes","useField","field","className","control","checked","value","Paper","TableContainer","TableBody","TableRow","TableHead","TableCell","Button","Container","Form","initialValues","formikProps","theme","display","flexDirection","justifyContent","spacing","button","minWidth","FormActions","resetForm","useFormikContext","type","variant","onClick","Table","TextField","touched","error","isError","useFieldError","helperText","size","labels","sampleSize","sampleMean","standardDeviation","enableHypothesisTest","hypothesizedMean","Yup","shape","integer","min","required","when","is","thing","then","requiredLabel","SamplingForm","appendSampling","useSampling","debuggerEnabled","key","search","window","location","URLSearchParams","get","getQueryParam","values","helpers","id","shortid","generate","disabled","noResults","width","textAlign","SamplingResults","samplings","clearSamplings","length","component","aria-label","align","map","sampling","SamplingContext","createContext","useContext","Sampling","context","useState","setSamplings","handleClearSamplings","useCallback","handleAppendSampling","useInitSampling","maxWidth","Provider","App","ThemeProvider","createMuiTheme","Boolean","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6b91d363.chunk.js","sourcesContent":["import React from \"react\";\nimport { FormikConsumer } from \"formik\";\n\n\n\n/**\n * Utility Component used as a child in the Form component to debug\n * form state.\n *\n */\nexport const FormikDebugger = () => (\n  <div\n    style={{\n      margin: \"3rem 1rem\",\n      borderRadius: 4,\n      background: \"#f6f8fa\",\n      boxShadow: \"0 0 1px  #eee inset\",\n    }}\n  >\n    <div\n      style={{\n        textTransform: \"uppercase\",\n        fontSize: 11,\n        borderTopLeftRadius: 4,\n        borderTopRightRadius: 4,\n        fontWeight: 500,\n        padding: \".5rem\",\n        background: \"#555\",\n        color: \"#fff\",\n        letterSpacing: \"1px\",\n      }}\n    >\n      Formik State\n    </div>\n    <FormikConsumer>\n      {({ validationSchema, validate, onSubmit, ...rest } = {}) => (\n        <pre\n          style={{\n            fontSize: \".85rem\",\n            padding: \".25rem .5rem\",\n            overflowX: \"scroll\",\n          }}\n        >\n          {JSON.stringify(rest, null, 2)}\n        </pre>\n      )}\n    </FormikConsumer>\n  </div>\n);\n","import React from \"react\";\nimport * as MUI from \"@material-ui/core\";\n\nexport const Typography = ({ children, ...restProps }) => {\n  return (\n    <MUI.Typography {...restProps}>\n      {children}\n    </MUI.Typography>\n  );\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles(() => ({\n  root: {\n    \"&.MuiFormControlLabel-root\": {\n      marginTop: 16,\n      marginRight: 0,\n      marginLeft: 0,\n    }\n  },\n}));\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport * as MUI from \"@material-ui/core\";\nimport { useField } from \"formik\";\n\nexport const Checkbox = ({\n  children,\n  name,\n  color = \"primary\",\n  label,\n  labelPlacement = \"end\",\n  ...restProps\n}) => {\n  const classes = useStyles();\n  const [field] = useField(name);\n\n  return (\n    <MUI.FormControlLabel\n      className={classes.root}\n      control={<MUI.Checkbox checked={field.value} color={color} />}\n      label={label}\n      labelPlacement={labelPlacement}\n      {...field}\n      {...restProps}\n    />\n  );\n};\n","import React from \"react\";\nimport * as MUI from \"@material-ui/core\"\n\nexport const Paper = ({ children, ...restProps }) => {\n  return <MUI.Paper {...restProps}>{children}</MUI.Paper>;\n};\n\n","import React from \"react\";\nimport * as MUI from \"@material-ui/core\"\n\nexport const TableContainer = ({ children, ...restProps }) => {\n  return <MUI.TableContainer {...restProps}>{children}</MUI.TableContainer>;\n};\n\n","import React from \"react\";\nimport * as MUI from \"@material-ui/core\"\n\nexport const TableBody = ({ children, ...restProps }) => {\n  return <MUI.TableBody {...restProps}>{children}</MUI.TableBody>;\n};\n\n","import React from \"react\";\nimport * as MUI from \"@material-ui/core\"\n\nexport const TableRow = ({ children, ...restProps }) => {\n  return <MUI.TableRow {...restProps}>{children}</MUI.TableRow>;\n};\n\n","import React from \"react\";\nimport * as MUI from \"@material-ui/core\"\n\nexport const TableHead = ({ children, ...restProps }) => {\n  return <MUI.TableHead {...restProps}>{children}</MUI.TableHead>;\n};\n\n","import React from \"react\";\nimport * as MUI from \"@material-ui/core\"\n\nexport const TableCell = ({ children, ...restProps }) => {\n  return <MUI.TableCell {...restProps}>{children}</MUI.TableCell>;\n};\n\n","import React from \"react\";\nimport * as MUI from \"@material-ui/core\";\n\nexport const Button = ({ children, ...restProps }) => {\n  return (\n    <MUI.Button {...restProps}>\n      {children}\n    </MUI.Button>\n  );\n};\n","import React from \"react\";\nimport * as MUI from \"@material-ui/core\";\n\nexport const Container = ({ children, ...restProps }) => {\n  return (\n    <MUI.Container {...restProps}>\n      {children}\n    </MUI.Container>\n  );\n};\n","import React from \"react\";\nimport { Formik, Form as FormikForm } from \"formik\";\n\nexport const Form = ({\n  children = () => undefined,\n  initialValues = {},\n  validationSchema = {},\n  onSubmit = () => undefined,\n  className,\n  ...restProps\n}) => {\n  return (\n    <Formik\n      className={restProps.className}\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n      {...restProps}\n    >\n      {(formikProps) => (\n        <FormikForm className={className}>{children(formikProps)}</FormikForm>\n      )}\n    </Formik>\n  );\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    marginTop: theme.spacing(2),\n  },\n  button: {\n    minWidth: 120,\n    \"&:not(last-child)\": {\n      marginLeft: theme.spacing(2),\n    },\n  },\n}));\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport { Button, Container } from \"common\";\nimport { useFormikContext } from \"formik\";\n\nexport const FormActions = () => {\n  const classes = useStyles();\n  const { resetForm } = useFormikContext();\n  const handleReset = () => resetForm({});\n\n  return (\n    <Container className={classes.root}>\n      <Button\n        className={classes.button}\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Ok\n      </Button>\n      <Button\n        className={classes.button}\n        onClick={handleReset}\n        variant=\"outlined\"\n      >\n        Reset\n      </Button>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport * as MUI from \"@material-ui/core\"\n\nexport const Table = ({ children, ...restProps }) => {\n  return <MUI.Table {...restProps}>{children}</MUI.Table>;\n};\n\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    \"&.MuiFormControl-root\": {\n      marginTop: theme.spacing(2),\n    }\n  },\n}));\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport { useField } from \"formik\";\nimport { useFieldError } from \"core/hooks\";\nimport * as MUI from \"@material-ui/core\";\n\nexport const TextField = ({ children, name, ...restProps }) => {\n  const classes = useStyles();\n  const [field, meta] = useField(name);\n  const [error, helperText] = useFieldError(meta);\n  return (\n    <MUI.TextField\n      {...field}\n      {...restProps}\n      size=\"small\"\n      variant=\"outlined\"\n      error={error}\n      helperText={helperText}\n      className={classes.root}\n    />\n  );\n};\n","\n\n/**\n * Hook that uses the touched and error values from Formiks \"useField\" hook\n * to determine if a text field has an error or helper text to display.\n * \n * @param {touched} boolean - If the user has interacted with the field.\n * @param {error} string - The error string to display to the user.  \n * @returns [isError, helperText] - The isError flag, and the text to display.\n */\nexport function useFieldError({ touched, error }) {\n  const isError = touched && !!error;\n  const helperText = isError && error;\n  return [isError, helperText];\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles(() => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n}));\n","import * as Yup from \"yup\";\n\nexport const labels = {\n  SAMPLE_SIZE: \"Sample Size\",\n  SAMPLE_MEAN: \"Sample Mean\",\n  STANDARD_DEVIATION: \"Standard Deviation\",\n  HYPOTHESIZED_MEAN: \"Hypothesized Mean\",\n  PERFORM_HYPOTHESIS_TEST: \"Perform Hypothesis Test\",\n};\n\nexport const initialValues = {\n  sampleSize: \"\",\n  sampleMean: \"\",\n  standardDeviation: \"\",\n  enableHypothesisTest: false,\n  hypothesizedMean: \"\",\n};\n\nexport const validationSchema = Yup.object().shape({\n  sampleSize: Yup.number()\n    .integer(`${labels.SAMPLE_SIZE} must be a whole number`)\n    .min(2)\n    .required()\n    .label(labels.SAMPLE_SIZE),\n  sampleMean: Yup.number().required().label(labels.SAMPLE_MEAN),\n  standardDeviation: Yup.number()\n    .required()\n    .min(1, `${labels.STANDARD_DEVIATION} must be greater than 0`)\n    .label(labels.STANDARD_DEVIATION),\n  enableHypothesisTest: Yup.boolean(),\n  hypothesizedMean: Yup.number().when(\"enableHypothesisTest\", {\n    is: (thing) => thing,\n    then: Yup.number().required().label(labels.HYPOTHESIZED_MEAN),\n  }),\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport { TextField, Checkbox, FormActions, Form } from \"common\";\nimport { FormikDebugger } from \"core\";\nimport { useSampling } from \"pages/Sampling\";\nimport shortid from \"shortid\";\nimport { getQueryParam } from \"../../core/utils/getQueryParam\";\nimport { validationSchema, initialValues, labels } from \"./config\";\n\nexport const requiredLabel = (label) => `${label} *`;\n\nexport const SamplingForm = () => {\n  const classes = useStyles();\n  const { appendSampling } = useSampling();\n  const debuggerEnabled = getQueryParam(\"debugger\") === \"enabled\";\n\n  const handleSubmit = (values, helpers) => {\n    appendSampling({ id: shortid.generate(), ...values });\n    helpers.resetForm();\n  };\n\n  return (\n    <Form\n      className={classes.root}\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values }) => (\n        <>\n          <TextField\n            name=\"sampleSize\"\n            label={requiredLabel(labels.SAMPLE_SIZE)}\n            type=\"number\"\n          />\n          <TextField\n            name=\"sampleMean\"\n            label={requiredLabel(labels.SAMPLE_MEAN)}\n            type=\"number\"\n          />\n          <TextField\n            name=\"standardDeviation\"\n            label={requiredLabel(labels.STANDARD_DEVIATION)}\n            type=\"number\"\n          />\n          <Checkbox\n            name=\"enableHypothesisTest\"\n            label={labels.PERFORM_HYPOTHESIS_TEST}\n          />\n          <TextField\n            name=\"hypothesizedMean\"\n            label={\n              values.enableHypothesisTest\n                ? requiredLabel(labels.HYPOTHESIZED_MEAN)\n                : labels.HYPOTHESIZED_MEAN\n            }\n            type=\"number\"\n            disabled={!values.enableHypothesisTest}\n          />\n          <FormActions />\n          {debuggerEnabled && <FormikDebugger />}\n        </>\n      )}\n    </Form>\n  );\n};\n","\n/**\n * Utility function to get query string values from the url.\n * If I was using react router I would use the built in hooks, but\n * for this example since it doesn't require router I felt this small utility\n * would be appropriate.\n * @param {string} key - The key of the query paramter\n * @returns {string | undefined} - Returns the associated query  key value or undefined if no value if found. \n */\nexport const getQueryParam = (key) => {\n  const search = window.location.search;\n  const params = new URLSearchParams(search);\n  return params.get(key);\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) => ({\n  noResults: {\n    width: \"100%\",\n    textAlign: \"center\",\n    padding: theme.spacing(2),\n  },\n}));\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport {\n  Paper,\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"common\";\nimport { useSampling } from \"pages/Sampling\";\nimport { Button } from \"common\";\nimport { Typography } from \"../../common/Typography/component\";\n\nexport const SamplingResults = () => {\n  const classes = useStyles();\n  const { samplings, clearSamplings } = useSampling();\n\n  return (\n    <>\n      <Button disabled={!samplings.length} onClick={() => clearSamplings()}>\n        Clear Results\n      </Button>\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"right\">Sample Size</TableCell>\n              <TableCell align=\"right\">Sample Mean</TableCell>\n              <TableCell align=\"right\">Standard Deviation</TableCell>\n              <TableCell align=\"right\">Hypothesized Mean</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {samplings.map((sampling) => (\n              <TableRow key={sampling.id}>\n                <TableCell align=\"right\">{sampling.sampleSize}</TableCell>\n                <TableCell align=\"right\">{sampling.sampleMean}</TableCell>\n                <TableCell align=\"right\">\n                  {sampling.standardDeviation}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {sampling.hypothesizedMean || \"N/A\"}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        {!samplings.length && (\n          <Typography className={classes.noResults}>\n            No Sampling Results\n          </Typography>\n        )}\n      </TableContainer>\n    </>\n  );\n};\n","import { createContext, useContext, useState, useCallback } from \"react\";\n\n/**\n * Initial values for Sampling Context.\n */\nconst initialValues = {\n  samplings: [],\n  appendSampling: () => undefined,\n  clearSamplings: () => undefined,\n}\n\n/**\n * Creates the initial Sampling context with initial values using React's\n * createContext method. \n * @returns {SamplingContext} React Context Object\n */\nexport const SamplingContext = createContext(initialValues);\n\n/**\n * Hook to use the Sampling context.\n * @returns {SamplingContext}\n */\nexport const useSampling = () => useContext(SamplingContext);\n  \n/**\n * Hook to use onMount to initialize the Sampling Context with getters and setters\n * to manipulate context state.\n * @returns {SamplingContext}\n */\nexport const useInitSampling = () => {\n  const [samplings, setSamplings] = useState([]);\n  const handleClearSamplings = useCallback(() => setSamplings([]), []);\n  const handleAppendSampling = useCallback(\n    (values) => setSamplings([...samplings, values]),\n    [samplings]\n  );\n\n  return {\n      samplings,\n      appendSampling: handleAppendSampling,\n      clearSamplings: handleClearSamplings\n  }\n}\n  ","import React from \"react\";\nimport { Container } from \"common\";\nimport { SamplingForm, SamplingResults } from \"features\";\nimport { SamplingContext, useInitSampling } from \"./context\";\n\nexport const Sampling = ({ children, ...restProps }) => {\n  const context = useInitSampling();\n\n  return (\n    <Container maxWidth=\"sm\" {...restProps}>\n      <SamplingContext.Provider value={context}>\n        <SamplingForm />\n        <SamplingResults />\n      </SamplingContext.Provider>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport { Container } from \"common\";\nimport { Sampling } from \"pages\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport { createTheme } from \"core/config/theme\";\n\nexport const App = () => {\n  return (\n    <ThemeProvider theme={createTheme()}>\n      <Container maxWidth=\"md\">\n        <Sampling />\n      </Container>\n    </ThemeProvider>\n  );\n};\n","import { createMuiTheme } from \"@material-ui/core\";\n\n/**\n * Utility function to setup theme for the application.\n * This is where we could add customization and theme/config changes.\n * @returns {Theme}\n */\nexport const createTheme = () => createMuiTheme({});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./core\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { CssBaseline } from \"@material-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}